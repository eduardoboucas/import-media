///
/// Generates a media query based on a list of conditions
///
/// @author Eduardo Boucas
///
/// @param{List}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media(">phone"){ }
///
/// @example scss - With two set breakpoints
///  @include media(">phone", "<=tablet"){ }
///
/// @example scss - With custom values
///  @include media(">=358px", "<850px"){ }
///
/// @example scss - With set breakpoints with custom values
///  @include media(">desktop", "<=1350px"){ }
///
/// @example scss - With a static expression
///  @include media("retina2x"){ }
///
/// @example scss - Do something for each condition
///  @include media("each", "", ">=phone", ">=tablet", retina){
///   .#{$media}foo{ // use $media to get the name of the breakpoint
///    background: black;
///   }
///  }
///
/// @example scss - Do something for each breakpoint in `$breakpoints`
///  @include media("each", "breakpoint"){
///   .#{$media}foo{
///    background: black;
///   }
///  }
///
/// @example scss - Mixing everything
///  @include media(">=350px", "<tablet", "retina3x"){ }
///
@mixin media($conditions...){
 $media: "" !global; // resets $media to be "" each time it's called so it doesn't interfere with other media calls

 @if nth($conditions, 1) == "each"{
  $_breakpoint: nth($conditions, 2);
  $_breakpoint-index: str-index($_breakpoint, "breakpoint");
  @if $_breakpoint-index != null{
   @if $_breakpoint-index == 1{ // if the dimention and operator aren't set
    $_breakpoint: "width>=breakpoint";
   }
   $_breakpoint-parsed: parse-expression($_breakpoint);
   $conditions: set-nth($conditions, 2, "");
   @each $key, $value in $breakpoints{ // loops through each breakpoint name and prepends "<=" to it.
    $conditions: append($conditions, "" + map-get($_breakpoint-parsed, dimension) + map-get($_breakpoint-parsed, operator) + $key, "comma");
   }
  }

  @for $i from 2 through length($conditions){
   $condition: nth($conditions, $i);
   $name: map-get(parse-expression($condition), value);
   @include media(nth($conditions, $i)){
    $media: if($name == "", "", "#{$name}-") !global;
    @content;
   }
  }

 }@else{
  @for $i from 1 through length($conditions){
   $conditions: set-nth($conditions, $i, map-get(parse-expression(nth($conditions, $i)), expression));
  }
  $branches: get-query-branches($conditions);
  $query: "";
  @each $branch in $branches{
   @if (str-length($query) != 0){
    $query: $query + ", ";
   }
   $query: $query + $branch;
  }
  @if $query == ""{
   @content;
  }@else{
   @media #{$query}{
    @content;
   }
  }
 }
}
