///
/// Generates a media query based on a list of conditions
///
/// @author Eduardo Boucas
/// @author joseLuÃ­s
///
/// @param {List}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media(">phone") { }
///
/// @example scss - With two set breakpoints
///  @include media(">phone", "<=tablet") { } 
///
/// @example scss - With custom values
///  @include media(">=358px", "<850px") { } 
///
/// @example scss - With set breakpoints with custom values
///  @include media(">desktop", "<=1350px") { } 
///
/// @example scss - With a static expression
///  @include media("retina2x") { } 
///
/// @example scss - Mixing everything
///  @include media(">=350px", "<tablet", "retina3x") { } 
///
/// @example scss - With aliases
///  $media-aliases: (
///    "palm" : "<=phone",
///    "lap3x": ( ">=350px", "<tablet", "retina3x" )
///  );
///  @include media("lap3x") { }
///  @include media("palm", "retina2x") { }
///
/// @example scsss - With lists
///   $palm2x: ( "<=phone", "retina2x" ); 
///   @include media($palm2x) { }
///  
@mixin media($conditions...) {
  $conditions_parsed: ();

  @for $i from 1 through length($conditions) {
    
    // Is it a list of conditions
    @if type_of(nth($conditions, $i )) == 'list' {
      @for $li from 1 through length(nth($conditions, $i )) {
        $conditions_parsed: append($conditions_parsed, parse-expression(nth(nth($conditions, $i), $li)));
      }
    }
    
   // Is it an alias
    @else if map-has-key($media-aliases, nth($conditions, $i )) {
      $alias: map-get($media-aliases, nth($conditions, $i ));

      @if type_of($alias) == 'list' {
        @for $li from 1 through length($alias) {
          $conditions_parsed: append($conditions_parsed, parse-expression(nth($alias, $li)));
        }
      }
      @else {
        $conditions_parsed: append($conditions_parsed, parse-expression($alias));
      }
    }
    
    // Is it a single condition
    @else {
      $conditions_parsed: append($conditions_parsed, parse-expression(nth($conditions, $i)));
    }
  }

  $branches: get-query-branches($conditions_parsed);
  $query: '';

  @each $branch in $branches {
    @if (str-length($query) != 0) {
      $query: $query + ', ';
    }

    $query: $query + $branch;
  }

  @media #{$query} {
    @content;
  }
}
