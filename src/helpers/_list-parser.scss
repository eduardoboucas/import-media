///
/// TODO: Documentation
///
/// @param {String} $queries - (TODO: documentation)
/// @param {Boolean} $do-parse - (TODO: documentation)
///
/// @return {String} - (TODO: documentation)
///
@function resolve-feature-queries($queries, $do-parse: true) {
  $separator: list-separator($queries);
  $result: if($separator == 'space', ((),), ());

  @each $query in $queries {
    $chainable-queries: ();

    @if (type-of($query) == 'list') {
      // List item is a list itself
      $chainable-queries: resolve-feature-queries($query);
    } @else {
      // List item is a string
      $parsed-query: if($do-parse, parse-expression($query), $query);

      @if (type-of($parsed-query) == 'list') {
        // Parsed expression is a list
        $chainable-queries: resolve-feature-queries($parsed-query, false);
      } @else {
        // Parsed expression is a string
        $chainable-queries: ($parsed-query);
      }
    }

    $result: append-feature-query($result, $chainable-queries, $separator);
  }

  @return $result;
}

///
/// TODO: Documentation
///
@function append-feature-query($parent-queries, $child-queries, $separator) {
  $result: if($separator == 'space', (), $parent-queries);

  @each $child-query in $child-queries {
    @if ($separator == 'space') {
      // Logical AND
      @each $parent-query in $parent-queries {
        $updated-query: join($parent-query, $child-query, $separator);
        $result: append($result, $updated-query, 'comma');
      }
    } @else {
      // Logical OR
      $result: append($result, $child-query, 'comma');
    }
  }

  @return $result;
}

///
/// TODO: Documentation
///
@function parse-media-query($queries) {
  $result: null;
  $flat-queries: ();
  $separator: list-separator($queries);
  $conjunction: if($separator == 'space', ' and ', ', ');

  @each $query in $queries {
    @if (type-of($query) == 'list') {
      $flat-queries: append($flat-queries, parse-media-query($query));
    } @else {
      $flat-queries: append($flat-queries, $query);
    }
  }

  @for $i from 1 through length($flat-queries) {
    $e: nth($flat-queries, $i);
    $result: if($i != length($flat-queries), $result#{$e}#{$conjunction}, $result#{$e});
  }

  @return $result;
}
