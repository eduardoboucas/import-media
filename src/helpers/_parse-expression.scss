///
/// Parses a string to form a media query expression
///
/// @author Eduardo Boucas
///
/// @param{String}   $expression  - expression (in string)
///
/// @throws Expression with type `type-of($expression)` detected, string expected
/// @throws `$expression` is missing an operator
/// @throws Unknown unit: `$unit`
///
/// @return{String | Null}
///
@function parse-expression($expression){
  $operator: "";
  $value: "";
  $element: "";
  $result: "";
  $is-value: true;
  $dimension: "width";

  @if (type-of($expression) != "string"){
    @warn "Expression with type `#{type-of($expression)}` detected, string expected.";
  }

  @if $expression != ""{

   // Detecting the "height" prefix
   @if (str-slice($expression, 1, 6) == "height"){
    $dimension: "height";
    $expression: str-slice($expression, 7);
   }

   // Detecting (and ignoring) the "width" prefix for consistency
   @if (str-slice($expression, 1, 5) == "width"){
    $expression: str-slice($expression, 6);
   }

   // Separating the operator from the rest of the expression
   @if (str-slice($expression, 2, 2) == "="){
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
   }@else{
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
   }

   @debug $expression;

   // Checking what type of expression we're dealing with
   @if map-has-key($breakpoints, $value){
    $result: map-get($breakpoints, $value);
   }@else if map-has-key($media-expressions, $expression){
    $result: map-get($media-expressions, $expression);
    $value: $expression;
    $is-value: false;
   }@else if str-index($expression, "breakpoint") != null{
    $result: "multiple breakpoints";
    $is-value: false;
   }@else{
    $result: to-number($value);
   }

   @if ($is-value){
    $unit: unit($result);
    $interval: 0;

    @if (map-has-key($unit-intervals, $unit)){
     $interval: map-get($unit-intervals, $unit);
    }@else{
     @warn "Unknown unit: #{$unit}";
    }

    @if ($operator == ">"){
     $element: "(min-#{$dimension}: #{$result + $interval})";
    }@else if ($operator == "<"){
     $element: "(max-#{$dimension}: #{$result - $interval})";
    }@else if ($operator == ">="){
     $element: "(min-#{$dimension}: #{$result})";
    }@else if ($operator == "<="){
     $element: "(max-#{$dimension}: #{$result})";
    }@else{
     @warn "#{$expression} is missing an operator.";
    }
   }@else{
    $element: $result;
   }
  }

  @return (
   expression: $element,
   operator: $operator,
   dimension: $dimension,
   value: $value
  );
}
